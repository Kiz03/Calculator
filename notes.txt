FIRST ATTEMPT 

for (let i = 0; i<hoe.length; i++) {
           if (hoe[i + 1] === '÷') {
           divv.push(hoe[i]);
           divv.push(hoe[i + 2]);
           hoe.splice(i, i + 3, divide(divv));
           divv = [];
           
           } else if (hoe[i - 1] === '÷') {
            divv.push(hoe[i - 2]);
            divv.push(hoe[i]);
            hoe.splice(i - 2, i + 3, divide(divv));
            divv = [];
           
           } else if (hoe.includes('÷') === false && hoe.includes('x') === true) {
            if (hoe[i + 1] === 'x') {
                multt.push(hoe[i]);
                multt.push(hoe[i + 2]);
                hoe.splice(i, i + 3, multiply(multt));
                multt = [];

            } else if (hoe[i - 1] === 'x') {
                multt.push(hoe[i - 2]);
                multt.push(hoe[i]);
                hoe.splice(i - 2, i + 3, multiply(multt));
                multt = [];
            }
                
           }

           
         // if (hoe[i + 1] === '+') {
  //       goza += (parseInt(hoe[i]) + parseInt(hoe[i - 2]));
      //   hoe.splice(i, (i + 3), goza);
           

        //    }
      //  if (hoe[i] === '1') {
          //  hoe.splice(i, i + 3, goza)
       // }

            
    


        
               

            
            
          //on += parseInt(hoe[i]);
         //if (hoe[i - 1] === '+') {
            // total = 0;
             //total += (parseInt(hoe[i - 2]) + parseInt(hoe[i]));
            //pls.push(parseInt(hoe[i]))
            //pls.push(parseInt(hoe[i + 2]))

          
        }

        console.log(hoe);

        SECOND ATTEMPT 

       for (let i = 0; i<hoe.length; i++) {
        if (hoe.length > 1) {
           if (hoe[i + 1] === '÷') {
           divv.push(hoe[i]);
           divv.push(hoe[i + 2]);
           hoe.splice(i, i + 3, divide(divv));
           divv = [];
           i = -1;
           
           } else if (hoe.includes('÷') === false && hoe.includes('x') === true) {
           
            if (hoe[i + 1] === 'x') {
                multt.push(hoe[i]);
                multt.push(hoe[i + 2]);
                hoe.splice(i, i + 3, multiply(multt));
                multt = [];
                i = -1;
                

            } 
            

                
           }
        } else {
            break;
        }

        
THIRD ATTEMPT 
  for (let i = 0; i<hoe.length; i++) {
        if (hoe.length > 1) {
           if (hoe[i + 1] === '÷') {
           divv.push(hoe[i]);
           divv.push(hoe[i + 2]);
           hoe.splice(i, i + 3, divide(divv));
           divv = [];
           i = -1;
           
           } if (hoe.includes('÷') === false) { // the reason it is working is because the if statements execute in order. The first statement first then second, when you did else if it would check if hoe[i + 1] === div if it was'nt it would move on the else if but if else if was'nt true it would not run back and start from if becaue there wa no else
           
            if (hoe[i + 1] === 'x') {
                multt.push(hoe[i]);
                multt.push(hoe[i + 2]);
                hoe.splice(i, i + 3, multiply(multt));
                multt = [];
                i = -1;
                

            } 
        }

            if (hoe.includes('x') === false && hoe.includes('÷') === false) {
                if (hoe[i + 1] === '+') {
                addd.push(hoe[i]);
                addd.push(hoe[i + 2]);
                hoe.splice(i, i + 3, add(addd));
                addd = [];
                i = -1;
                // i can't get it right 

            }

            }

            

            
            

                
           
        } else {
            break;
        }

        
          

           
         // if (hoe[i + 1] === '+') {
  //       goza += (parseInt(hoe[i]) + parseInt(hoe[i - 2]));
      //   hoe.splice(i, (i + 3), goza);
           

        //    }
      //  if (hoe[i] === '1') {
          //  hoe.splice(i, i + 3, goza)
       // }

            
    


        
               

            
            
          //on += parseInt(hoe[i]);
         //if (hoe[i - 1] === '+') {
            // total = 0;
             //total += (parseInt(hoe[i - 2]) + parseInt(hoe[i]));
            //pls.push(parseInt(hoe[i]))
            //pls.push(parseInt(hoe[i + 2]))

          
        }
        
        FOURTH ATTEMPT  

            let lala;
       let baza;
       let goo = [] ;
        let he = ['15', 'x', '10', '÷', '2', '+', '2', '+', '2', '÷', '3', '+', '2', '+', '6', 'x', '7'];
      
    for (let i = 0; i<he.length; i++) {
        if (he[i + 1] ===   '+' && he[i - 1] != '÷'  && he[i - 1] != 'x') {
            goo.push(he[i])
            goo.push(he[i + 2])
            delete he[i];
            delete he[i + 1];
            delete he[i + 2];
            if (he[i] === undefined) {
                he.splice(i, 1, add(goo));
                goo = [];
            }
            
            
            
        } 

        
    }
    lala = he.join().replaceAll(',', '');
    baza = Array.from(lala);
   
    for (let i = 0; i<baza.length; i++) {
        if (baza[i + 1] != 'x' && baza[i + 1] != '+' && baza[i + 1] !=  '÷' && baza[i] != 'x' && baza[i] != '+' && baza[i] != '÷' && i != (baza.length - 1)) {
            baza.splice(i, 2, baza[i] + baza[i + 1])
        }
    }

       
    
   
    let final = baza;

    for (let i = 0; i < final; i++) {
        if (final.length > 1) {
            if (final[i + 1] === '÷') {
                divv.push(final[i]);
                divv.push(final[i + 2]);
                final.splice(i, 3, )


            }

        } else {
            break;
        }
    }
  //  console.log(finalWRK)

    
        //console.log(sor);

      // ;
      //  let azz = [divide(['64', '3']), '1'];
       //if (azz.includes(divide(['64', '3'])) === false) {
      //  console.log('not there')
      // } else {
      //  console.log('yes')
      // }

      //  let arraaa = ['1', '1', '1'];
    // arraaa.splice(0, 8, 'hey');
    //console.log(arraaa);

      // console.log(hoe);

      //  console.log(hoe);
        // W;ORKING SO IMPLEMENT FROM NOTES 
       
         
        

        

        //console.log(-3 * 2);

        //if (parseInt('-') === true) {
           // console.log('ye');
       // } else {
         //   console.log('fal');
       // }

       

        // join everything together and seperate it from the operator 
        //let gaga = '1+1';
       // let oz = Array.from(gaga);
       // console.log(oz);
       //if ( typeof '+' === 'number') {
        //console.log('yes');
      // } else {
      //  console.log('no');
      // }

       //console.log(parseInt(9));
     

     
       
        

        // for now i made the operater function like this, i'm not really sure what Odin wants me to do at this tage tbh.

       //console.log(operator(1, 2, 'x'));